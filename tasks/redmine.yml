---
- name: Setup redmine
  become: true
  become_user: "{{ redmine_user }}"
  environment:
    RAILS_ENV: "{{ redmine_mode }}"
    REDMINE_LANG: "{{ redmine_lang }}"
  block:
    - name: Checkout Redmine
      ansible.builtin.git:
        repo: "{{ redmine_repo }}"
        dest: "{{ redmine_home }}"
        version: "{{ redmine_version }}"
      register: git_result
    - name: Create bundler setting directory
      ansible.builtin.file:
        path: "{{ redmine_home }}/.bundle"
        state: directory
        mode: "0755"
    - name: Copy bundler setting file
      ansible.builtin.template:
        src: bundle/config.j2
        dest: "{{ redmine_home }}/.bundle/config"
        mode: "0644"
    - name: Create Gemfile.local file
      ansible.builtin.template:
        src: Gemfile.local.j2
        dest: "{{ redmine_home }}/Gemfile.local"
        mode: "0644"
    - name: Create database config file
      ansible.builtin.template:
        src: database.yml.j2
        dest: "{{ redmine_home }}/config/database.yml"
        mode: "0644"
      register: db_config_result
    - name: Create Redmine config file
      ansible.builtin.template:
        src: configuration.yml.j2
        dest: "{{ redmine_home }}/config/configuration.yml"
        mode: "0644"
      notify: restart redmine
    - name: Execute bundle update
      ansible.builtin.command:
        cmd: bundle update
        chdir: "{{ redmine_home }}"
      when: git_result is changed
    - name: Create secret token
      ansible.builtin.command:
        cmd: bundle exec rake generate_secret_token
        chdir: "{{ redmine_home }}"
        creates: "{{ redmine_home }}/config/initializers/secret_token.rb"
      register: generate_token_result
    - name: Restore redmine data
      when: |
        - (generate_token_result is changed or redmine_restore)
        - (redmine_restore_files_archive_file is defined or redmine_restore_database_dump_file is defined)
      block:
        - name: Upload restore file(files archive)
          ansible.builtin.copy:
            src: "{{ redmine_upload_restore_files_archive_file }}"
            dest: "{{ redmine_restore_files_archive_file }}"
            mode: "0644"
          when: redmine_upload_restore_files_archive_file is defined
        - name: Upload restore file(database dump)
          ansible.builtin.copy:
            src: "{{ redmine_upload_restore_database_dump_file }}"
            dest: "{{ redmine_restore_database_dump_file }}"
            mode: "0644"
          when: redmine_upload_restore_files_archive_file is defined
        - name: Restore redmine data
          ansible.builtin.import_tasks: restore.yml
    - name: Migrate database
      ansible.builtin.command:
        cmd: bundle exec rake db:migrate
        chdir: "{{ redmine_home }}"
      notify: restart redmine
      when: git_result is changed or db_config_result is changed
    - name: Load default data
      ansible.builtin.command:
        cmd: bundle exec rake redmine:load_default_data
        chdir: "{{ redmine_home }}"
      when:
        - generate_token_result is changed
        - redmine_restore_files is undefined
        - not redmine_skip_load_default_data
    - name: Install themes from git
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ redmine_theme_dir }}/{{ item.directory if item.directory is defined else item.name }}"
        version: master
      loop: "{{ redmine_themes | selectattr('repo', 'defined') | list }}"
      loop_control:
        label: "{{ item.name }}"
    - name: Install themes from file
      ansible.builtin.unarchive:
        src: "{{ item.file }}"
        dest: "{{ redmine_theme_dir }}"
        mode: "0644"
      loop: "{{ redmine_themes | selectattr('file', 'defined') | list }}"
      loop_control:
        label: "{{ item.name }}"
    - name: Install plugin from git
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ redmine_plugin_dir }}/{{ item.directory if item.directory is defined else 'redmine_' + item.name }}"
        version: "{{ item.version | default('master') }}"
      loop: "{{ redmine_plugins | selectattr('repo', 'defined') | list }}"
      loop_control:
        label: "{{ item.name }}"
      notify: restart redmine
      register: plugin_install_from_git_result
    - name: Download plugin archive file
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "{{ redmine_home }}/tmp/{{ item.url | basename }}"
        mode: "0644"
      loop: "{{ redmine_plugins | selectattr('url', 'defined') | list }}"
      loop_control:
        label: "{{ item.name }}"
    - name: Unarchive downloaded plugin archive file
      ansible.builtin.unarchive:
        src: "{{ redmine_home }}/tmp/{{ item.url | basename }}"
        dest: "{{ redmine_plugin_dir }}"
        remote_src: true
        mode: "0755"
      loop: "{{ redmine_plugins | selectattr('url', 'defined') | list }}"
      loop_control:
        label: "{{ item.name }}"
      notify: restart redmine
      register: plugin_install_from_url_result
    - name: Unarchive plugin archive file
      ansible.builtin.unarchive:
        src: "{{ item.file }}"
        dest: "{{ redmine_plugin_dir }}"
        mode: "0755"
      loop: "{{ redmine_plugins | selectattr('file', 'defined') | list }}"
      loop_control:
        label: "{{ item.name }}"
      notify: restart redmine
      register: plugin_install_from_file_result
    - name: Install plugin dependency packages
      ansible.builtin.apt:
        name: "{{ item.1 }}"
        state: present
      loop: "{{ redmine_plugins | subelements('required_packages', {'skip_missing': True}) }}"
      loop_control:
        label: "{{ item.1 }}"
      notify: restart redmine
      become: true
      become_user: root
    - name: Create plugin custom setting file
      ansible.builtin.template:
        src: plugin/custom_setting.yml.j2
        dest: "{{ redmine_home }}/config/{{ item.custom_setting_name }}.yml"
        mode: "0644"
      loop: "{{ redmine_plugins | selectattr('custom_setting_name', 'defined') | list }}"
      loop_control:
        label: "{{ item.name }}"
    - name: Setup plugin
      when: |
        plugin_install_from_git_result is changed
        or
        plugin_install_from_url_result is changed
        or
        plugin_install_from_file_result is changed
      block:
        - name: Execute bundle install
          ansible.builtin.command:
            cmd: bundle install
            chdir: "{{ redmine_home }}"
        - name: Execute bundle exec rake db:migrate
          ansible.builtin.command:
            cmd: bundle exec rake db:migrate
            chdir: "{{ redmine_home }}"
        - name: Execute bundle exec rake redmine:plugins:migrate
          ansible.builtin.command:
            cmd: bundle exec rake redmine:plugins:migrate
            chdir: "{{ redmine_home }}"
        - name: Execute plugin post install action
          ansible.builtin.command:
            cmd: "{{ item.post_install_action }}"
            chdir: "{{ redmine_home }}"
          loop: "{{ redmine_plugins | selectattr('post_install_action', 'defined') | list }}"
          loop_control:
            label: "{{ item.name }}"
    - name: Create puma config file
      ansible.builtin.template:
        src: puma.rb.j2
        dest: "{{ redmine_home }}/config/puma.rb"
        mode: "0644"
      notify: restart redmine
    - name: clear cache
      ansible.builtin.command:
        cmd: bundle exec rake tmp:cache:clear
        chdir: "{{ redmine_home }}"
      when: redmine_cache_clear | default(false)
    - name: Create setting file directory
      ansible.builtin.file:
        path: "{{ redmine_home }}/tmp/import"
        state: directory
        mode: "0755"
    - name: Import Redmine setting
      ansible.builtin.import_tasks: import.yml
      when: |
        generate_token_result is changed
        or
        redmine_reimport | default(false)
